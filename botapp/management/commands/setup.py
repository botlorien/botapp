# botapp/management/commands/setup.py

import os
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.contrib.auth import get_user_model

from botapp.db_init import ensure_schema_exists


class Command(BaseCommand):
    help = 'Inicializa o BotApp: configura schema, migra√ß√µes e superusu√°rio'

    def handle(self, *args, **options):
        self.stdout.write(self.style.NOTICE("üîß Iniciando configura√ß√£o do BotApp..."))

        # 1. Certifica-se que o settings √© o certo
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'botapp.settings')

        # 2. Garante que Django est√° configurado
        import django
        django.setup()

        from django.conf import settings

        # 3. Cria o schema se n√£o existir
        self.stdout.write("üóÇÔ∏è Verificando schema do banco...")
        try:
            ensure_schema_exists(settings.DATABASE_SCHEMA)
            self.stdout.write(self.style.SUCCESS(f"‚úîÔ∏è Schema '{settings.DATABASE_SCHEMA}' verificado no banco {settings.DATABASES['default']['NAME']}."))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro ao garantir schema: {e}"))

        # 4. Migrations
        self.stdout.write("üì¶ Aplicando migra√ß√µes...")
        try:
            call_command('makemigrations', interactive=False, verbosity=0)
            call_command('migrate', interactive=False, verbosity=0)
            self.stdout.write(self.style.SUCCESS("‚úîÔ∏è Migra√ß√µes aplicadas."))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ö†Ô∏è Erro durante migra√ß√µes: {e}"))

        # 5. Cria√ß√£o autom√°tica de superusu√°rio
        self.stdout.write("üë§ Verificando superusu√°rio...")
        User = get_user_model()
        DEFAULT_SUPERUSER = {
            'username': os.getenv('BOTAPP_SUPERUSER_USERNAME', 'admin'),
            'email': os.getenv('BOTAPP_SUPERUSER_EMAIL', 'admin@example.com'),
            'password': os.getenv('BOTAPP_SUPERUSER_PASSWORD', 'admin123'),
        }

        try:
            if not User.objects.filter(username=DEFAULT_SUPERUSER['username']).exists():
                User.objects.create_superuser(
                    username=DEFAULT_SUPERUSER['username'],
                    email=DEFAULT_SUPERUSER['email'],
                    password=DEFAULT_SUPERUSER['password']
                )
                self.stdout.write(self.style.SUCCESS(f"üõ†Ô∏è Superusu√°rio '{DEFAULT_SUPERUSER['username']}' criado com sucesso."))
            else:
                self.stdout.write(self.style.WARNING(f"‚úÖ Superusu√°rio '{DEFAULT_SUPERUSER['username']}' j√° existe."))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Falha ao criar superusu√°rio: {e}"))

        # 6. Instancia o BotApp (opcional)
        try:
            from botapp.core import BotApp
            app = BotApp(os.environ.get('PG_BOTAPP_DBNAME'))
            self.stdout.write(self.style.SUCCESS("üöÄ BotApp iniciado com sucesso."))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è BotApp n√£o p√¥de ser iniciado: {e}"))
